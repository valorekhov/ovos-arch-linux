_gh_org=OpenVoiceOS
_gh_proj=ovos-gui
pkgname=python-ovos-gui
_name=ovos-gui
_unit_name="ovos-gui-messagebus"
_commit='2085be98f5c29cb92c68d084ee73cbafd839a5cc'
pkgver='0.1.0'
pkgrel=00
pkgdesc='GUI messagebus service, manages GUI state and implements the gui protocol'
arch=('any')
url='https://github.com/OpenVoiceOS/ovos-gui/'
license=('Apache License 2.0')
depends=('ovos-core' 'ovos-service-base' 'ovos-messagebus-server' 'python' 'python-sdnotify')
makedepends=(python-build python-installer python-wheel python-setuptools)
provides=("$_unit_name")
conflicts=("$_unit_name")

#### Automatically generated dependencies. Do not edit.
depends+=(
'python-ovos-bus-client>=0.0.7' # ovos-bus-client>=0.0.7,~=0.0
'python-ovos-config>=0.0.12' # ovos-config>=0.0.12,~=0.0
'python-ovos-plugin-manager>=0.0.24' # ovos-plugin-manager>=0.0.24
'python-ovos-utils>=0.0.37' # ovos-utils>=0.0.37,~=0.0
'python-tornado>=6.0.3' # tornado>=6.0.3,~=6.0
)
conflicts+=(

)
optdepends+=(

)

#### End of automatically generated dependencies.
source=("https://github.com/$_gh_org/$_gh_proj/archive/$_commit.tar.gz" \
    "$_unit_name.service" \
    "ovos-systemd_gui_messagebus.py" \
    # "python-ovos-gui.install" \
    )
sha256sums=('a1d664e9b1d692217279c445a18a2d31e076388d59c89aebd9981811fdce7b41'
            'b8418c1ba00a7ee9fb28a0a188a0ea7e39cbc5dfbfd21e3715797dfef23e78a9'
            '91183c0c107817a3e95a17dc3a68dbc2b84341373c645d762b1e2bc2f10dbbc9')

prepare() {
    cd "$srcdir"
    for patch in "../"*.patch; do
        if [ -f "$patch" ]; then
          echo "Applying patch $patch"
          patch --forward --strip=1 --input="${PWD}/${patch}" --directory="${srcdir}/${_name}-${_commit}"
        fi
    done
}

pkgver(){
    cd "$srcdir/$_name-$_commit"
    echo "$(python setup.py --version)"
}

build() {
    cd "$_name-$_commit"
    python -m build --wheel --no-isolation
}

check() {
    cd "$_name-$_commit"

    local site_packages=$(python -c "import site; print(site.getsitepackages()[0])")
    local python_version=$(python -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')

    # nosetests
    # pytest
}

package() {
    cd "$_name-$_commit"

    echo "Installing $pkgname to $pkgdir"
    # some packages produce multiple wheels, install the one specific to the version of the package
    python -m installer --destdir="$pkgdir" dist/*$pkgver*.whl

    # Optional: Copy documentation files
    if [ -d "$srcdir/$pkgname/docs" ]; then
        mkdir -p "$pkgdir/usr/share/doc/$pkgname"  # Create doc directory
        cp -r "$srcdir/$pkgname/docs" "$pkgdir/usr/share/doc/$pkgname" || true
        chmod 644 "$pkgdir/usr/share/doc/$pkgname"/*.txt  || true # Set read permissions for documentation files
    fi
    
    # Optional: Remove unused files or directories
    # For example, removing unneeded binaries, license files, etc.
    # rm "$pkgdir/usr/bin/unneeded_binary"  # Remove unneeded binary
    # rm "$pkgdir/usr/share/doc/$pkgname/unneeded_license.txt"  # Remove unneeded license file

    # Search for license files in the original source directory
    mkdir -p $pkgdir/usr/share/licenses/$pkgname
    find "$srcdir" -maxdepth 2 -type f -name 'LICENSE*' -exec cp -t "$pkgdir/usr/share/licenses/$pkgname" {} +
    find "$srcdir" -maxdepth 1 -type f -name 'COPYING*' -exec cp -t "$pkgdir/usr/share/licenses/$pkgname" {} +

    mkdir -p "$pkgdir/usr/lib/systemd/system"
    install -Dm644 "$srcdir/$_unit_name.service" "$pkgdir/usr/lib/systemd/system"

    mkdir -p "$pkgdir/etc/systemd/system/$_unit_name.d/"
    install -Dm644 "$srcdir/ovos-systemd_gui_messagebus.py" "$pkgdir/etc/systemd/system/$_unit_name.d/"
}

