pkgname=python-ovos-workshop
_gh_org=OpenVoiceOS
_gh_proj=OVOS-workshop
_name=OVOS-workshop
_commit='72351ac1037c00b5736b2efa6a5d62c664faf6e5'
pkgver='0.1.1'
pkgrel=00
pkgdesc='frameworks, templates and patches for the mycroft universe'
arch=('any')
url='https://github.com/OpenVoiceOS/OVOS-workshop/'
license=('Apache License 2.0')
depends=(python)
makedepends=(python-build python-installer python-wheel python-setuptools)

#### Automatically generated dependencies. Do not edit.
depends+=(
'python-ovos-backend-client>=0.1.0' # ovos-backend-client<1.0.0,>=0.1.0
'python-ovos-bus-client>=0.0.8' # ovos_bus_client<1.0.0,>=0.0.8
'python-ovos-config>=0.0.12' # ovos-config<1.0.0,>=0.0.12
'python-ovos-lingua-franca>=0.4.6' # ovos-lingua-franca<1.0.0,>=0.4.6
'python-ovos-utils>=0.0.38' # ovos-utils<1.0.0,>=0.0.38
'python-rapidfuzz' # rapidfuzz
)
conflicts+=(
'python-ovos-backend-client>=1.0.0' # ovos-backend-client<1.0.0,>=0.1.0
'python-ovos-bus-client>=1.0.0' # ovos_bus_client<1.0.0,>=0.0.8
'python-ovos-config>=1.0.0' # ovos-config<1.0.0,>=0.0.12
'python-ovos-lingua-franca>=1.0.0' # ovos-lingua-franca<1.0.0,>=0.4.6
'python-ovos-utils>=1.0.0' # ovos-utils<1.0.0,>=0.0.38
)
optdepends+=(
'python-ovos-classifiers>=0.0.0a46' # ovos_classifiers>=0.0.0a46; extra == "ocp"
'python-ovos-ocp-audio-plugin' # ovos_plugin_common_play; extra == "ocp"
)

#### End of automatically generated dependencies.
source=("https://github.com/$_gh_org/$_gh_proj/archive/$_commit.tar.gz")
sha256sums=('2ae9cd9712491b09cd532602c52ea37bd6e11aec397aca99e50fe9ccd3e9794f')

prepare() {
    cd "$srcdir"
    for patch in "../"*.patch; do
        if [ -f "$patch" ]; then
          echo "Applying patch $patch"
          patch --forward --strip=1 --input="${PWD}/${patch}" --directory="${srcdir}/${_name}-${_commit}"
        fi
    done
}

pkgver(){
    cd "$srcdir/$_name-$_commit"
    echo "$(python setup.py --version)"
}

build() {
    cd "$_name-$_commit"
    python -m build --wheel --no-isolation
}

check() {
    cd "$_name-$_commit"

    local site_packages=$(python -c "import site; print(site.getsitepackages()[0])")
    local python_version=$(python -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')

    # nosetests
    # pytest
}

package() {
    cd "$_name-$_commit"

    echo "Installing $pkgname to $pkgdir"
    # some packages produce multiple wheels, install the one specific to the version of the package
    python -m installer --destdir="$pkgdir" dist/*$pkgver*.whl

    # Optional: Copy documentation files
    if [ -d "$srcdir/$pkgname/docs" ]; then
        mkdir -p "$pkgdir/usr/share/doc/$pkgname"  # Create doc directory
        cp -r "$srcdir/$pkgname/docs" "$pkgdir/usr/share/doc/$pkgname" || true
        chmod 644 "$pkgdir/usr/share/doc/$pkgname"/*.txt  || true # Set read permissions for documentation files
    fi
    
    # Optional: Remove unused files or directories
    # For example, removing unneeded binaries, license files, etc.
    # rm "$pkgdir/usr/bin/unneeded_binary"  # Remove unneeded binary
    # rm "$pkgdir/usr/share/doc/$pkgname/unneeded_license.txt"  # Remove unneeded license file

    # Search for license files in the original source directory
    mkdir -p $pkgdir/usr/share/licenses/$pkgname
    find "$srcdir" -maxdepth 2 -type f -name 'LICENSE*' -exec cp -t "$pkgdir/usr/share/licenses/$pkgname" {} +
    find "$srcdir" -maxdepth 1 -type f -name 'COPYING*' -exec cp -t "$pkgdir/usr/share/licenses/$pkgname" {} +
}


