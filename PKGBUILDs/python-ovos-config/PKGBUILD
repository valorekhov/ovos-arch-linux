_gh_org=OpenVoiceOS
_gh_proj=ovos-config
pkgname=python-ovos-config
_name=ovos-config
_commit='22627c5a6ef09a3618e371407a7f16a5bc7b83ba'
pkgver='0.0.11'
pkgrel=00
pkgdesc='helper package to interact with mycroft config'
arch=('any')
url='https://github.com/OpenVoiceOS/ovos-config/'
license=('Apache License 2.0')
depends=(python)
makedepends=(python-build python-installer python-wheel python-setuptools)

#### Automatically generated dependencies. Do not edit.
depends+=(
'python-ovos-utils' # ovos-utils<0.1.0
'python-combo-lock>=0.2' # combo_lock~=0.2
'python-dateutil>=2.6' # python-dateutil~=2.6
'python-rich-click>=1.6' # rich-click~=1.6
'python-yaml>=5.4.0' # PyYAML<7.0.0,>=5.4.0
)
conflicts+=(
'python-ovos-backend-client>=0.1.0' # ovos_backend_client<0.1.0; extra == "extras"
'python-ovos-utils>=0.1.0' # ovos-utils<0.1.0
'python-yaml>=7.0.0' # PyYAML<7.0.0,>=5.4.0
)
optdepends+=(

)

#### End of automatically generated dependencies.
source=("https://github.com/$_gh_org/$_gh_proj/archive/$_commit.tar.gz")
sha256sums=('8ba0ddadc8953dc8a5acf727c9095e8f42f4314373c8f1d3fab29e415031d97c')

prepare() {
    cd "$srcdir"
    for patch in "../"*.patch; do
        if [ -f "$patch" ]; then
          echo "Applying patch $patch"
          patch --forward --strip=1 --input="${PWD}/${patch}" --directory="${srcdir}/${_name}-${_commit}"
        fi
    done
}

pkgver(){
    cd "$srcdir/$_name-$_commit"
    echo "$(python setup.py --version)"
}

build() {
    cd "$_name-$_commit"
    python -m build --wheel --no-isolation
}

check() {
    cd "$_name-$_commit"

    local site_packages=$(python -c "import site; print(site.getsitepackages()[0])")
    local python_version=$(python -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')

    # nosetests
    # pytest
}

package() {
    cd "$_name-$_commit"

    echo "Installing $pkgname to $pkgdir"
    # some packages produce multiple wheels, install the one specific to the version of the package
    python -m installer --destdir="$pkgdir" dist/*$pkgver*.whl

    # Optional: Copy documentation files
    if [ -d "$srcdir/$pkgname/docs" ]; then
        mkdir -p "$pkgdir/usr/share/doc/$pkgname"  # Create doc directory
        cp -r "$srcdir/$pkgname/docs" "$pkgdir/usr/share/doc/$pkgname" || true
        chmod 644 "$pkgdir/usr/share/doc/$pkgname"/*.txt  || true # Set read permissions for documentation files
    fi
    
    # Optional: Remove unused files or directories
    # For example, removing unneeded binaries, license files, etc.
    # rm "$pkgdir/usr/bin/unneeded_binary"  # Remove unneeded binary
    # rm "$pkgdir/usr/share/doc/$pkgname/unneeded_license.txt"  # Remove unneeded license file

    # Search for license files in the original source directory
    mkdir -p $pkgdir/usr/share/licenses/$pkgname
    find "$srcdir" -maxdepth 2 -type f -name 'LICENSE*' -exec cp -t "$pkgdir/usr/share/licenses/$pkgname" {} +
    find "$srcdir" -maxdepth 1 -type f -name 'COPYING*' -exec cp -t "$pkgdir/usr/share/licenses/$pkgname" {} +
}


################################################################################
# #
# # python-ovos-config
# #
# ################################################################################
# 
# PYTHON_OVOS_CONFIG_VERSION = de57ca2f69fc0b4b95b56f2f486ce75cdd0a421e
# PYTHON_OVOS_CONFIG_SITE = $(call github,OpenVoiceOS,ovos-config,$(PYTHON_OVOS_CONFIG_VERSION))
# PYTHON_OVOS_CONFIG_SETUP_TYPE = setuptools
# PYTHON_OVOS_CONFIG_LICENSE_FILES = LICENSE
# PYTHON_OVOS_CONFIG_ENV = MYCROFT_LOOSE_REQUIREMENTS=true
# 
# $(eval $(python-package))
# 




