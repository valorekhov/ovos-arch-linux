_gh_org=OpenVoiceOS
_gh_proj=ovos-dinkum-listener
pkgname=python-ovos-dinkum-listener
_name=ovos-dinkum-listener
_unit_name="ovos-listener-messagebus"
_commit='a8d22f5bdf03f55ddd87d96af2d2586f24fd07fa'
pkgver='0.1.3'
pkgrel=00
pkgdesc='The "ears" of the OVOS assistant! Listens for wakewords, performs VAD and STT, the final transcribed speech is then sent to ovos-core. Dinkum flavor'
arch=('any')
url="https://github.com/$_gh_org/$_gh_proj/"
license=('Apache License 2.0')
depends=('ovos-core' 'ovos-service-base' 'ovos-messagebus-server' 'python' 'python-sdnotify' \
'ovos-microphone-plugin' \
#'python-ovos-stt-plugin-vosk' \
'python-ovos-vad-plugin-webrtcvad' \
#python-ovos-ww-plugin-pocketsphinx>=0.1.3' #>=0.1.3,~=0.1 \
#python-ovos-ww-plugin-precise-lite>=0.1.2a3' #>=0.1.2a3,~=0.1 \
#python-ovos-ww-plugin-vosk' \
#python-pyaudio' \
)
makedepends=(python-build python-installer python-wheel python-setuptools)
provides=("$_unit_name")
conflicts=("$_unit_name" "python-ovos-listener")
replaces=("python-ovos-listener")

#### Automatically generated dependencies. Do not edit.
depends+=(
'python-ovos-bus-client>=0.0.7' # ovos_bus_client<1.0.0,>=0.0.7
'python-ovos-config>=0.1.0' # ovos-config<1.0.0,>=0.1.0
'python-ovos-plugin-manager>=0.1.0' # ovos-plugin-manager<1.0.0,>=0.1.0
'python-ovos-utils>=0.0.38' # ovos-utils<1.0.0,>=0.0.38
'python-speechrecognition>=3.9' # SpeechRecognition~=3.9
)
conflicts+=(
'python-ovos-backend-client>=2.0.0' # ovos-backend-client<2.0.0,>=0.1.0; extra == "extras"
'python-ovos-bus-client>=1.0.0' # ovos_bus_client<1.0.0,>=0.0.7
'python-ovos-config>=1.0.0' # ovos-config<1.0.0,>=0.1.0
'python-ovos-microphone-plugin-alsa>=1.0.0' # ovos-microphone-plugin-alsa<1.0.0,>=0.0.0; extra == "linux"
'python-ovos-microphone-plugin-sounddevice>=1.0.0' # ovos-microphone-plugin-sounddevice<1.0.0,>=0.0.0; extra == "extras"
'python-ovos-plugin-manager>=1.0.0' # ovos-plugin-manager<1.0.0,>=0.1.0
'python-ovos-stt-plugin-chromium>=1.0.0' # ovos-stt-plugin-chromium<1.0.0,>=0.0.1; extra == "extras"
'python-ovos-stt-plugin-server>=1.0.0' # ovos-stt-plugin-server<1.0.0,>=0.0.3; extra == "extras"
'python-ovos-stt-plugin-vosk>=1.0.0' # ovos-stt-plugin-vosk<1.0.0,>=0.0.1; extra == "extras"
'python-ovos-utils>=1.0.0' # ovos-utils<1.0.0,>=0.0.38
'python-ovos-vad-plugin-noise>=1.0.0' # ovos-vad-plugin-noise<1.0.0,>=0.1.0; extra == "extras"
'python-ovos-vad-plugin-silero>=1.0.0' # ovos-vad-plugin-silero<1.0.0,>=0.0.1; extra == "onnx"
'python-ovos-ww-plugin-openwakeword>=1.0.0' # ovos-ww-plugin-openwakeword<1.0.0,>=0.0.1; extra == "onnx"
'python-ovos-ww-plugin-precise-lite>=1.0.0' # ovos-ww-plugin-precise-lite<1.0.0,>=0.1; extra == "extras"
'python-ovos-ww-plugin-vosk>=1.0.0' # ovos-ww-plugin-vosk<1.0.0,>=0.1; extra == "extras"
)
optdepends+=(
'python-onnxruntime' # onnxruntime; extra == "onnx"
'python-ovos-backend-client>=0.1.0' # ovos-backend-client<2.0.0,>=0.1.0; extra == "extras"
'python-ovos-microphone-plugin-alsa>=0.0.0' # ovos-microphone-plugin-alsa<1.0.0,>=0.0.0; extra == "linux"
'python-ovos-microphone-plugin-sounddevice>=0.0.0' # ovos-microphone-plugin-sounddevice<1.0.0,>=0.0.0; extra == "extras"
'python-ovos-stt-plugin-chromium>=0.0.1' # ovos-stt-plugin-chromium<1.0.0,>=0.0.1; extra == "extras"
'python-ovos-stt-plugin-server>=0.0.3' # ovos-stt-plugin-server<1.0.0,>=0.0.3; extra == "extras"
'python-ovos-stt-plugin-vosk>=0.0.1' # ovos-stt-plugin-vosk<1.0.0,>=0.0.1; extra == "extras"
'python-ovos-vad-plugin-noise>=0.1.0' # ovos-vad-plugin-noise<1.0.0,>=0.1.0; extra == "extras"
'python-ovos-vad-plugin-silero>=0.0.1' # ovos-vad-plugin-silero<1.0.0,>=0.0.1; extra == "onnx"
'python-ovos-ww-plugin-openwakeword>=0.0.1' # ovos-ww-plugin-openwakeword<1.0.0,>=0.0.1; extra == "onnx"
'python-ovos-ww-plugin-precise-lite>=0.1' # ovos-ww-plugin-precise-lite<1.0.0,>=0.1; extra == "extras"
'python-ovos-ww-plugin-vosk>=0.1' # ovos-ww-plugin-vosk<1.0.0,>=0.1; extra == "extras"
)

#### End of automatically generated dependencies.
source=("https://github.com/$_gh_org/$_gh_proj/archive/$_commit.tar.gz" \
    "$_unit_name.service" \
    "ovos-systemd_dinkum_listener_messagebus.py" \
    # "python-ovos-listener.install" \
)
sha256sums=('9cc0a30602a81eaf9de825a3c4f0c80d8fc6a056bab3150eeaac24df07b56a88'
            '6d852114cd72b873a90690191c9db678ae7d06180fd61bd0a63315155bab093d'
            'f6b682fbc4020f6573a9a9407b32ba59d369feba579dec8dd34816ceb01376cb')

prepare() {
    cd "$srcdir"
    for patch in "../"*.patch; do
        if [ -f "$patch" ]; then
          echo "Applying patch $patch"
          patch --forward --strip=1 --input="${PWD}/${patch}" --directory="${srcdir}/${_name}-${_commit}"
        fi
    done
}

pkgver(){
    cd "$srcdir/$_name-$_commit"
    echo "$(python setup.py --version)"
}

build() {
    cd "$_name-$_commit"
    python -m build --wheel --no-isolation
}

check() {
    cd "$_name-$_commit"

    local site_packages=$(python -c "import site; print(site.getsitepackages()[0])")
    local python_version=$(python -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')

    # nosetests
    # pytest
}

package() {
    cd "$_name-$_commit"

    echo "Installing $pkgname to $pkgdir"
    # some packages produce multiple wheels, install the one specific to the version of the package
    python -m installer --destdir="$pkgdir" dist/*$pkgver*.whl

    # Optional: Copy documentation files
    if [ -d "$srcdir/$pkgname/docs" ]; then
        mkdir -p "$pkgdir/usr/share/doc/$pkgname"  # Create doc directory
        cp -r "$srcdir/$pkgname/docs" "$pkgdir/usr/share/doc/$pkgname" || true
        chmod 644 "$pkgdir/usr/share/doc/$pkgname"/*.txt  || true # Set read permissions for documentation files
    fi
    
    # Optional: Remove unused files or directories
    # For example, removing unneeded binaries, license files, etc.
    # rm "$pkgdir/usr/bin/unneeded_binary"  # Remove unneeded binary
    # rm "$pkgdir/usr/share/doc/$pkgname/unneeded_license.txt"  # Remove unneeded license file

    # Search for license files in the original source directory
    mkdir -p $pkgdir/usr/share/licenses/$pkgname
    find "$srcdir" -maxdepth 2 -type f -name 'LICENSE*' -exec cp -t "$pkgdir/usr/share/licenses/$pkgname" {} +
    find "$srcdir" -maxdepth 1 -type f -name 'COPYING*' -exec cp -t "$pkgdir/usr/share/licenses/$pkgname" {} +

    mkdir -p "$pkgdir/usr/lib/systemd/system"
    install -Dm644 "$srcdir/$_unit_name.service" "$pkgdir/usr/lib/systemd/system"

    mkdir -p "$pkgdir/etc/systemd/system/$_unit_name.d/"
    install -Dm644 "$srcdir/ovos-systemd_dinkum_listener_messagebus.py" "$pkgdir/etc/systemd/system/$_unit_name.d/"
}
